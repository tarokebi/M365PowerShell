# 1. CSVから表示名リストを読み込み
$inputList = Import-Csv -Path "names.csv"

# 2. 先に Get-Recipient を一括取得（1回だけ！）
$allRecipients = Get-Recipient -ResultSize Unlimited

# 3. 照合とマッピング
$result = foreach ($row in $inputList) {
    $displayName = $row.DisplayName

    $match = $allRecipients | Where-Object { $_.DisplayName -eq $displayName }

    if ($match) {
        [PSCustomObject]@{
            DisplayName    = $match.DisplayName
            EmailAddress   = $match.PrimarySmtpAddress
            RecipientType  = $match.RecipientType
            Found          = "Yes"
        }
    } else {
        [PSCustomObject]@{
            DisplayName    = $displayName
            EmailAddress   = ""
            RecipientType  = ""
            Found          = "No"
        }
    }
}

# 4. 出力
$result | Export-Csv -Path "ResolvedRecipients.csv" -NoTypeInformation -Encoding UTF8

###
# 🔸 検索対象の外部アドレスをここに配列で定義
$externalEmails = @(
    "one@example.com",
    "two@example.com",
    "three@example.com",
    "four@example.com",
    "five@example.com"
)

# 🔸 結果格納用（@{ アドレス = [所属してるグループ名の配列] } の形で保存）
$results = @{}

# 🔸 対象となるメールが有効なセキュリティグループ一覧を取得
$mailEnabledSecGroups = Get-DistributionGroup -ResultSize Unlimited | Where-Object { $_.GroupType -like "*SecurityEnabled*" }

$total = $mailEnabledSecGroups.Count
$count = 0

foreach ($group in $mailEnabledSecGroups) {
    $count++
    Write-Progress -Activity "Checking groups..." `
                   -Status "Checking: $($group.DisplayName)" `
                   -PercentComplete (($count / $total) * 100)

    $members = Get-DistributionGroupMember -Identity $group.Identity -ResultSize Unlimited

    foreach ($email in $externalEmails) {
        if ($members.PrimarySmtpAddress -contains $email) {
            if (-not $results.ContainsKey($email)) {
                $results[$email] = @()
            }
            $results[$email] += $group.DisplayName
        }
    }
}

Write-Progress -Activity "Checking groups..." -Completed

# 🔸 結果表示！
foreach ($email in $externalEmails) {
    Write-Host "`n📬 $email の所属グループ："
    if ($results.ContainsKey($email)) {
        $results[$email] | ForEach-Object { Write-Host " - $_" }
    } else {
        Write-Host " - (所属なし)"
    }
}

###
# CSV 読み込み
$csvContacts = Import-Csv -Path "external_contacts.csv"
$targetContacts = @{}
foreach ($contact in $csvContacts) {
    $trimmedDisplayName = $contact.DisplayName.Trim()
    $targetContacts[$trimmedDisplayName] = $null
}

# 外部連絡先を取得
$mailContacts = Get-MailContact -ResultSize Unlimited

# グループ一覧を取得
$groups = Get-DistributionGroup -ResultSize Unlimited | Where-Object {
    $_.RecipientTypeDetails -eq "MailUniversalSecurityGroup"
}

# 結果格納用
$result = @()

# 進捗バー表示用カウンタ
$totalGroups = $groups.Count
$index = 0

foreach ($group in $groups) {
    $index++
    
    # 進捗バーの表示
    Write-Progress -Activity "Checking Groups" `
                   -Status "Processing '$($group.DisplayName)'" `
                   -PercentComplete (($index / $totalGroups) * 100)

    $members = Get-DistributionGroupMember -Identity $group.Identity -ResultSize Unlimited
    $externalMembers = $members | Where-Object { $_.RecipientType -eq "MailContact" }

    foreach ($member in $externalMembers) {
        $trimmedName = $member.DisplayName.Trim()
        if ($targetContacts.ContainsKey($trimmedName)) {
            $result += [PSCustomObject]@{
                DisplayName        = $member.DisplayName
                Address            = $member.PrimarySmtpAddress
                SecurityGroupName  = $group.DisplayName
                SecurityGroupAlias = $group.Alias
            }
        }
    }
}

# 結果出力
$result | Export-Csv -Path "ExternalContacts_GroupMembership.csv" -NoTypeInformation -Encoding UTF8

# 最後に進捗バーをクリア（お好みで）
Write-Progress -Activity "Completed" -Status "All groups processed." -Completed



